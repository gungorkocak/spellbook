# üëã Hello Elixir with Livebook

## ‚õ¥ Onboard!

### 1. Share the current session link

password: `verymuchsecret42`

### 2. Change your username

‚ÜôÔ∏è From bottom left corner, click your avatar

![](images/click_avatar.png)

Change your Display name & save

![](images/change_username.png)

### 3. Say Hello ‚úã

üëá Add a function with your name that outputs your special hello message inside the `Hello` module below.

```elixir
defmodule Hello do
  @moduledoc """
  A warm way to say hi!
  """

  # Say hi with a function!
  def joe(), do: IO.puts("‚ò†Ô∏è Ahoy!")
end

for {fun, _} <- Hello.__info__(:functions) do
  apply(Hello, fun, [])
end
```

### 3. Follow me on Livebook!

‚¨ÖÔ∏è From left side, click Connected users & pin gungor

![](images/follow_me.png)

## üí• Crash Course

```elixir
import IEx.Helpers, only: [h: 1, i: 1, t: 1]

h(h)
h(i)
h(t)
```

### Basic Data Types

**Numbers**

```elixir
integer = 255
binary = 0b0110
hex = 0x1F
float = 3.14
```

```elixir
2 + 2
2 - 1
2 * 5
(10 / 5) |> IO.inspect(label: ">>>")

h(Kernel./())
```

If you need integer division or the division remainder (i.e., modulo), Elixir comes with two helpful functions to achieve this:

```elixir
div(10, 5)
rem(10, 3)
```

**Atoms**

An atom is a constant whose name is its value.

```elixir
:atom
:atom == :not_an_atom
is_atom(Hello)

i(Hello)
```

**Booleans**

Elixir supports `true` and `false` as booleans; everything is truthy except for `false` and `nil`:

```elixir
true? = true
false? = false
true == true

i(true)
```

**Boolean -> Operators**

Elixir provides the `||`, `&&`, and `!` boolean operators. These support any types:

```elixir
-20 || true
false || 42
42 && true
42 && nil
!42
!false
```

There are three additional operators whose first argument must be a boolean (`true` or `false`)

```elixir
true and 42
false or true
not false
# raises error
42 and true
```

**Boolean -> Comparision**

Elixir comes with all the comparison operators we‚Äôre used to: `==`, `!=`, `===`, `!==`, `<=`, `>=`, `<`, and `>`.

```elixir
1 > 2
1 != 2
2 == 2
2 == 2.0
2 === 2.0
2 <= 3
```

**Boolean -> Term Ordering**

An important feature of Elixir is that any two types can be compared; this is particularly useful in sorting. We don‚Äôt need to memorize the sort order, but it is important to be aware of it:

```
number < atom < reference < function < port < pid < tuple < map < list < bitstring
```

```elixir
:hello > 999
```

**Strings**

Strings in Elixir are UTF-8 encoded and are wrapped in double quotes:

```elixir
"Hello"
# this is not a string but a charlist
'Hello'

i("Hello")
```

**String -> Interpolation**

```elixir
name = "Joe"
"Hello #{name}!"
```

**String -> Concatenation**

```elixir
"Hello " <> name <> "!"
```

### Collections

**Lists**

Lists are simple collections of values which may include multiple types; lists may also include non-unique values:

```elixir
h(List)

list = [3.14, :pie, "Apple"]
```

Elixir implements list collections as **linked lists**. This means that accessing the list length is an operation that will run in linear time (`O(n)`).

For this reason, it is typically faster to prepend than to append:

```elixir
# prepending fast
["œÄ" | list]
# appending slow
list ++ ["Cherry"]
```

**Lists -> Concatenation**

```elixir
h(Kernel.++())

[1, 2] ++ [3, 4, 1]
```

**Lists -> Subtraction**

```elixir
h(Kernel.--())

["foo", :bar, 42] -- [42, "bar"]
```

Be mindful of duplicate values. For every element on the right, the first occurrence of it gets removed from the left:

```elixir
[1, 2, 2, 3, 2, 3] -- [1, 2, 3, 2]
# uses strict comparision
[2] -- [2.0]
```

**Lists -> Head / Tail**

```elixir
h(hd)
hd([3.14, :pie, "Apple"])
tl([3.14, :pie, "Apple"])
[head | tail] = [3.14, :pie, "Apple"]
```

**Tuples**

Tuples are similar to lists, but are stored contiguously in memory.

This makes accessing their length fast but modification expensive; the new tuple must be copied entirely to memory. Tuples are defined with curly braces:

```elixir
i({3.14, :pie, "Apple"})
```

It is common for tuples to be used as a mechanism to return additional information from functions; the usefulness of this will be more apparent when we get into pattern matching:

```elixir
i(File.read("files/hello.txt"))
File.read("path/to/unknown/file")
```

**Keyword Lists**

Keyword lists and maps are the associative collections of Elixir.

In Elixir, a keyword list is a special list of two-element tuples whose first element is an atom; they share performance with lists:

```elixir
i(foo: "bar", hello: "world")
[{:foo, "bar"}, {:hello, "world"}]
```

The three characteristics of keyword lists highlight their importance:

* Keys are atoms.
* Keys are ordered.
* Keys do not have to be unique.

For these reasons, keyword lists are most commonly used to pass options to functions.

**Maps**

In Elixir, maps are the ‚Äúgo-to‚Äù key-value store. Unlike keyword lists, they allow keys of any type and are un-ordered. You can define a map with the `%{}` syntax:

```elixir
dynamic_key = :foobaz
map = %{:foo => "bar", "hello" => :world, {:foo, :bar} => "foobar", dynamic_key => "baz"}
map[:foo]
map["hello"]
# special access for :atom keys, use it for more "secure" maps e.g. structs.
map.foo
```

There is a special syntax for maps containing only atom keys:

```elixir
%{foo: "bar", hello: "world"}
%{foo: "bar", hello: "world"} == %{:foo => "bar", :hello => "world"}
```

**Maps -> Update**

Another interesting property of maps is that they provide their own syntax for updates (note: this creates a new map):

```elixir
map = %{foo: "bar", hello: "world"}
i(%{map | foo: "baz"})

# Update syntax only works for updating a key that already exists in the map! If the key does not exist, a KeyError will be raised.
%{map | i_dont_exist: "nope :/"}
```

**Structs**

Structs are special maps with a defined set of keys and default values. A struct must be defined within a module, which it takes its name from. It is common for a struct to be the only thing defined within a module.

To define a struct we use `defstruct` along with a keyword list of fields and default values:

```elixir
defmodule Example.User do
  defstruct name: "Sean", roles: []
end

%Example.User{}
%Example.User{name: "Steve"}
%Example.User{name: "Steve", roles: [:manager]}
```

**Structs -> Update**

We can update our struct just like we would a map:

```elixir
steve = %Example.User{name: "Steve"}
sean = %{steve | name: "Sean"}
```

### Pattern Matching

In Elixir, the `=` operator is actually a **match operator**, comparable to the equals sign in algebra.

Writing it turns the whole expression into an equation and makes Elixir match the values on the left hand with the values on the right hand.

If the match succeeds, it returns the value of the equation. Otherwise, it throws an error. Let‚Äôs take a look:

```elixir
x = 1
1 = x
# raises MatchError
2 = x
```

Let‚Äôs try that with some of the collections we know:

```elixir
list = [1, 2, 3]
[1, 2, 3] = list
[1 | _] = list
[1, 2 | _] = list
[1, 2, 3 | []] = list

[1 | tail] = list
tail

{:ok, value} = {:ok, "Successful!"}
value
# raises MatchError
{:ok, value} = {:error}
```

The match operator performs assignment when the left side of the match includes a variable. In some cases this variable rebinding behavior is undesirable.

For these situations we have the pin operator: `^`.

```elixir
x = 1
^x = 1

key = "hello"
%{^key => value} = %{"hello" => "world"}
```

### Flow & Control

**Flow & Control -> `if` and `unless`**

```elixir
h(String.valid?())

if String.valid?("Hello") do
  "Valid string!"
else
  "Invalid string."
end

unless is_integer("hello") do
  "Not an Int"
end
```

**Flow & Control -> `cond`**

When we need to match conditions rather than values we can turn to `cond/1`; this is akin to `else if` from other languages:

```elixir
cond do
  7 + 1 == 0 -> "Incorrect"
  # having last condition as `true` is synonym to `else` case in other languages.
  true -> "Catch all"
end
```

**Flow & Control -> `case`**

If it‚Äôs necessary to match against multiple patterns we can use `case/2`:

```elixir
case {:ok, "Hello World"} do
  {:ok, result} -> result
  {:error} -> "Uh oh!"
  # The _ variable is an important inclusion in case/2 statements. Without it, failure to find a match will raise an error.
  _ -> "Catch'em all"
end
```

Another neat feature of `case/2` is its support for guard clauses with `when`:

```elixir
case {1, 2, 3} do
  {1, x, 3} when x > 0 ->
    "Will match"

  _ ->
    "Won't match"
end
```

**Flow & Control -> `with`**

The special form `with/1` is useful when you might use a nested `case/2` statement or situations that cannot cleanly be piped together.

```elixir
user = %{first: "Sean", last: "Callan"}

with {:ok, first} <- Map.fetch(user, :first),
     {:ok, last} <- Map.fetch(user, :last) do
  last <> " -> " <> first
else
  :error ->
    "Dunno :/"
end
```

**Flow & Control -> Functions**

Most primitive unit of flow in Elixir is function.

And most basic function type is the **anonymous** one:

```elixir
i(sum = fn a, b -> a + b end)
sum.(2, 3)
```

Using anonymous functions is such a common practice in Elixir there is shorthand for doing so:

```elixir
sum = &(&1 + &2)
sum.(2, 3)
```

Please note the `fun.()` call syntax with the `.`.

In Elixir difference between anonymous and named functions are explicit, which means we'll need to use `fun.()` syntax if `fun` is an anonymous function or `fun()` if it is a named one.

**Named functions** are defined **within a module** using the `def` keyword:

```elixir
h(def)

defmodule Greeter do
  def hello(name) do
    phrase() <> name
  end

  defp phrase(), do: "Hello, "
end

Greeter.hello("Joe")
# Raises UndefinedFunctionError since it is private
Greeter.phrase()
```

If our function body only spans one line, we can shorten it further with do:

```elixir
defmodule Greeter do
  def hello(name), do: "Hello, " <> name
end

Greeter.hello("Joe")
```

We mentioned earlier that functions are named by the combination of given **name** and **arity** (number of arguments).

This means you can do things like this:

```elixir
defmodule Greeter do
  # hello/0
  def hello(), do: "Hello, anonymous person!"
  # hello/1
  def hello(name), do: "Hello, " <> name
  # hello/2
  def hello(name1, name2), do: "Hello, #{name1} and #{name2}"
end

Greeter.__info__(:functions) |> IO.inspect(label: "Greeter2 functions")

Greeter.hello()
Greeter.hello("Fred")
Greeter.hello("Fred", "Jane")
```

Behind the scenes, functions are also **pattern-matching** the arguments that they‚Äôre called with.

In fact, pattern matching in function heads with **guards** is the most common pattern we are going to see in Elixir:

```elixir
defmodule Greeter do
  def hello("Joe"), do: "Hey, Joe!"

  def hello(name) when is_binary(name), do: "Hey, #{name}"

  def hello(names) when is_list(names) do
    for name <- names, do: hello(name)
  end

  def hello(%{name: person_name}) do
    IO.puts("Hello, " <> person_name)
  end

  def hello(_), do: "Hey, unknown!"
end

Greeter.hello("Joe")

i(Greeter.hello(["Joe", "Robert", "Mike"]))

fred = %{name: "Fred", age: "95", favorite_color: "Taupe"}
Greeter.hello(fred)

# Raises FunctionClauseError as the map doesn't include `:name` key.
Greeter.hello(%{age: "95", favorite_color: "Taupe"})
```

If we want a default value for an argument we use the argument `\\` value syntax:

```elixir
defmodule Greeter do
  def hello(name, lang \\ "en") do
    phrase(lang) <> name
  end

  defp phrase("en"), do: "Hello, "
  defp phrase("es"), do: "Hola, "
end

Greeter.hello("Sean")
Greeter.hello("Garcia", "es")
```

**Flow & Control -> Pipe Operator**

Consider this useless piece of functionality:

```elixir
Enum.join(String.split(String.upcase("Elixir rocks")), " ")
```

As nesting functions to combine functionality could get messy, this can be written with `|>` operator in Elixir:

```elixir
h(Kernel.|>())

"Elixir rocks"
|> String.upcase()
|> String.split()
|> Enum.join(" ")
```

**Flow & Control -> `for` comprehension**

If we want to transform a collection, `for` comprehension is usually the first thing to visit.

Unlike in other mutable languages, `for` is not actually a **loop**. It transforms a collection and returns the transformed version.

```elixir
h(for)

for x <- [1, 2, 3, 4, 5], do: x * x

for {_key, val} <- [one: 1, two: 2, three: 3], do: val

for {k, v} <- %{"a" => "A", "b" => "B"} do
  {k, v}
end
```

`for` comprehension accepts multiple **generator**s, **filter**s, and a single `into:` statement.

`left <- right` is called a **generator**. They‚Äôre responsible for generating the next value on the next iteration.

Like many other things in Elixir, generators rely on pattern matching to compare their input set to the left side variable.

In the event a match is not found, the value is ignored:

```elixir
for {:ok, val} <- [ok: "Hello", error: "Unknown", ok: "World"], do: val
```

It‚Äôs possible to use multiple generators, much like nested loops:

```elixir
for x <- 1..10, y <- 1..10, do: {x, y}
```

You can think of **filter**s as a sort of guard for comprehensions. When a filtered value returns `false` or `nil` it is excluded from the final list.

Like generators, we can use multiple filters.

```elixir
import Integer, only: [is_even: 1]

for x <- 1..10, y <- 1..10, is_even(x), rem(y, 3) == 0, do: {x, y}
```

What if we want to produce something other than a list?

Given the `:into` option we can do just that! As a general rule of thumb, `:into` accepts any structure that implements the `Collectable` protocol.

```elixir
import Integer, only: [is_even: 1]

for {k, v} <- [one: 1, two: 2, three: 3, four: 4], is_even(v), into: %{}, do: {k, v}
```

**Flow & Control -> `Enum` module**

Elixir also provides a huge set of higher order functions within the `Enum` module to transform collection.

They accept anonymous functions as the transformer function and apply it to every element inside the collection.

```elixir
h(Enum)

Enum.__info__(:functions) |> IO.inspect(label: "Enum functions")

Enum.map([1, 2, 3], fn x -> x * 2 end)
Enum.reduce(1..3, 0, &+/2)
```

As a rule of thumb, let's keep in mind that all the functions in `Enum` module are **generic implementation**s and they traverse the collection at least once.

So, if you have a more specific function inside the collection's module, you should probably use it.

## üõ† Build: Counter

## üõ† Build: Todo
